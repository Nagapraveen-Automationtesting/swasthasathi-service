pipeline {
    agent any
    
    environment {
        // Docker Configuration
        DOCKER_REGISTRY = 'ghcr.io/nagapraveen-automationtesting'
        IMAGE_NAME = 'swasthasathi-service'
        IMAGE_TAG = "${BUILD_NUMBER}"
        FULL_IMAGE_NAME = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
        
        // Kubernetes Configuration
        KUBECONFIG = ''
        K8S_NAMESPACE = 'swasthasathi'
        APP_NAME = 'swasthasathi-service'
        
        // Environment Variables
        MONGO_CONNECTION_STRING = 'mongodb://mongo:27017'
        JWT_SECRET_KEY = 'your-super-secret-jwt-key-here-make-it-long-and-random'
        BLOB_KEY = 'your-azure-blob-storage-key-here'
        BLOB_ACCOUNT_NAME = 'your-azure-storage-account-name'
        BLOB_CONTAINER = 'your-blob-container-name'
        OCR_BASE_URL = 'http://your-ocr-service-url'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        retry(1)
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Checking out source code..."
                checkout scm
                
                script {
                    env.GIT_COMMIT_HASH = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    env.GIT_COMMIT_MESSAGE = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    env.BUILD_TIMESTAMP = new Date().format("yyyy-MM-dd HH:mm:ss")
                }
                
                echo "üì¶ Build Info:"
                echo "  - Build Number: ${BUILD_NUMBER}"
                echo "  - Git Commit: ${env.GIT_COMMIT_HASH}"
                echo "  - Timestamp: ${env.BUILD_TIMESTAMP}"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                
                script {
                    sh """
                        docker build -t ${FULL_IMAGE_NAME} .
                        docker tag ${FULL_IMAGE_NAME} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                    
                    echo "‚úÖ Docker image built successfully: ${FULL_IMAGE_NAME}"
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo "üîí Running security scan..."
                
                script {
                    try {
                        sh """
                            if command -v trivy &> /dev/null; then
                                trivy image --exit-code 1 --severity HIGH,CRITICAL ${FULL_IMAGE_NAME}
                            else
                                echo "‚ö†Ô∏è  Trivy not available, skipping security scan"
                            fi
                        """
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è  Security scan completed with warnings: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                echo "üì§ Pushing Docker image to registry..."
                
                script {
                    sh """
                        docker push ${FULL_IMAGE_NAME}
                        docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                    
                    echo "‚úÖ Docker image pushed successfully"
                }
            }
        }
        
        stage('Prepare Deployment') {
            steps {
                echo "‚öôÔ∏è  Preparing Kubernetes deployment files..."
                
                script {
                    sh """
                        cd build-pipelines
                        
                        # Update deployment.yaml with new image tag
                        sed -i 's|image: swasthasathi-service:latest|image: ${FULL_IMAGE_NAME}|g' deployment.yaml
                        
                        echo "Using existing secret.yaml configuration..."
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo "üöÄ Deploying to Kubernetes..."
                
                script {
                    sh """
                        cd build-pipelines
                        
                        # Create namespace if it doesn't exist
                        kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        
                        # Use deployment script to handle deployment
                        chmod +x deploy.sh
                        ./deploy.sh
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo "‚úÖ Verifying deployment..."
                
                script {
                    sh """
                        cd build-pipelines
                        
                        echo "üìä Deployment Status:"
                        kubectl get deployment ${APP_NAME} -n ${K8S_NAMESPACE}
                        
                        echo "üìä Pod Status:"
                        kubectl get pods -l app=${APP_NAME} -n ${K8S_NAMESPACE}
                        
                        echo "üìä Service Status:"
                        kubectl get services -l app=${APP_NAME} -n ${K8S_NAMESPACE}
                        
                        echo "üè• Health Check:"
                        sleep 30
                        
                        POD_NAME=\$(kubectl get pods -l app=${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.items[0].metadata.name}')
                        if [ ! -z "\$POD_NAME" ]; then
                            echo "Testing health endpoint on pod: \$POD_NAME"
                            kubectl exec \$POD_NAME -n ${K8S_NAMESPACE} -- curl -f http://localhost:8000/health || echo "Health check failed"
                        fi
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Cleaning up..."
            
            script {
                sh """
                    docker rmi ${FULL_IMAGE_NAME} || true
                    docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest || true
                    docker system prune -f || true
                """
                
                sh """
                    cd build-pipelines
                    rm -f processed-secret.yaml || true
                """
            }
        }
        
        success {
            echo "üéâ Deployment completed successfully!"
        }
        
        failure {
            echo "‚ùå Deployment failed!"
            
            script {
                sh """
                    echo "üîç Getting logs from failed pods:"
                    kubectl logs -l app=${APP_NAME} -n ${K8S_NAMESPACE} --tail=100 || true
                    kubectl describe deployment ${APP_NAME} -n ${K8S_NAMESPACE} || true
                """
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è  Build completed with warnings"
        }
    }
}