pipeline {
    agent any
    
    environment {
        // Docker Configuration
        DOCKER_REGISTRY = 'ghcr.io/nagapraveen-automationtesting'
        IMAGE_NAME = 'swasthasathi-service'
        IMAGE_TAG = "${BUILD_NUMBER}"
        FULL_IMAGE_NAME = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
        
        // Kubernetes Configuration
        KUBECONFIG = '' // Using default kubeconfig
        K8S_NAMESPACE = 'swasthasathi'
        
        // Application Configuration
        APP_NAME = 'swasthasathi-service'
        
        // Notification Configuration
        SLACK_CHANNEL = '#deployment-notifications' // Configure as needed
        
        // Environment Variables for Deployment (using default values for now)
        MONGO_CONNECTION_STRING = 'mongodb://mongo:27017'
        JWT_SECRET_KEY = 'your-super-secret-jwt-key-here-make-it-long-and-random'
        BLOB_KEY = 'your-azure-blob-storage-key-here'
        BLOB_ACCOUNT_NAME = 'your-azure-storage-account-name'
        BLOB_CONTAINER = 'your-blob-container-name'
        OCR_BASE_URL = 'http://your-ocr-service-url'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        retry(1)
        skipStagesAfterUnstable()
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Checking out source code..."
                checkout scm
                
                script {
                    // Get commit information for better tracking
                    env.GIT_COMMIT_HASH = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    env.GIT_COMMIT_MESSAGE = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    env.BUILD_TIMESTAMP = new Date().format("yyyy-MM-dd HH:mm:ss")
                }
                
                echo "üì¶ Build Info:"
                echo "  - Build Number: ${BUILD_NUMBER}"
                echo "  - Git Commit: ${env.GIT_COMMIT_HASH}"
                echo "  - Timestamp: ${env.BUILD_TIMESTAMP}"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                
                script {
                    // Build the Docker image
                    sh """
                        docker build -t ${FULL_IMAGE_NAME} .
                        docker tag ${FULL_IMAGE_NAME} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                    
                    echo "‚úÖ Docker image built successfully: ${FULL_IMAGE_NAME}"
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo "üîí Running security scan..."
                
                script {
                    try {
                        // Run Trivy security scan (if available)
                        sh """
                            if command -v trivy &> /dev/null; then
                                trivy image --exit-code 1 --severity HIGH,CRITICAL ${FULL_IMAGE_NAME}
                            else
                                echo "‚ö†Ô∏è  Trivy not available, skipping security scan"
                            fi
                        """
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è  Security scan completed with warnings: ${e.getMessage()}"
                        // Continue pipeline but mark as unstable
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                echo "üì§ Pushing Docker image to registry..."
                
                script {
                    // Push Docker image (assuming already logged in)
                    sh """
                        docker push ${FULL_IMAGE_NAME}
                        docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                    
                    echo "‚úÖ Docker image pushed successfully"
                }
            }
        }
        
        stage('Prepare Deployment') {
            steps {
                echo "‚öôÔ∏è  Preparing Kubernetes deployment files..."
                
                script {
                    // Update deployment files with current image tag
                    sh """
                        cd build-pipelines
                        
                        # Update deployment.yaml with new image tag
                        sed -i 's|image: swasthasathi-service:latest|image: ${FULL_IMAGE_NAME}|g' deployment.yaml
                        
                        echo "Using existing secret.yaml configuration..."
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo "üöÄ Deploying to Kubernetes..."
                
                script {
                    // Deploy to Kubernetes using kubectl
                    // Using default kubeconfig
                        sh """
                            cd build-pipelines
                            
                            # Create namespace if it doesn't exist
                            kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            
                            # Use deployment script to handle deployment
                            chmod +x deploy.sh
                            ./deploy.sh
                        """
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo "‚úÖ Verifying deployment..."
                
                script {
                    // Using default kubeconfig
                        // Check deployment status
                        sh """
                            cd build-pipelines
                            
                            echo "üìä Deployment Status:"
                            kubectl get deployment ${APP_NAME} -n ${K8S_NAMESPACE}
                            
                            echo "üìä Pod Status:"
                            kubectl get pods -l app=${APP_NAME} -n ${K8S_NAMESPACE}
                            
                            echo "üìä Service Status:"
                            kubectl get services -l app=${APP_NAME} -n ${K8S_NAMESPACE}
                            
                            echo "üè• Health Check:"
                            # Wait a bit for pods to be ready
                            sleep 30
                            
                            # Get pod name and check health
                            POD_NAME=\$(kubectl get pods -l app=${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.items[0].metadata.name}')
                            if [ ! -z "\$POD_NAME" ]; then
                                echo "Testing health endpoint on pod: \$POD_NAME"
                                kubectl exec \$POD_NAME -n ${K8S_NAMESPACE} -- curl -f http://localhost:8000/health || echo "Health check failed"
                            fi
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Cleaning up..."
            
            script {
                // Clean up Docker images to save space
                sh """
                    docker rmi ${FULL_IMAGE_NAME} || true
                    docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest || true
                    docker system prune -f || true
                """
                
                // Clean up temporary files
                sh """
                    cd build-pipelines
                    rm -f processed-secret.yaml || true
                """
            }
        }
        
        success {
            echo "üéâ Deployment completed successfully!"
            
            script {
                // Send success notification (configure Slack plugin)
                try {
                    slackSend(
                        channel: "${SLACK_CHANNEL}",
                        color: 'good',
                        message: """
                            ‚úÖ *Deployment Successful* 
                            
                            *Application:* ${APP_NAME}
                            *Environment:* ${K8S_NAMESPACE}
                            *Image:* ${FULL_IMAGE_NAME}
                            *Build:* ${BUILD_NUMBER}
                            *Commit:* ${env.GIT_COMMIT_HASH}
                            *Time:* ${env.BUILD_TIMESTAMP}
                            
                            View build: ${BUILD_URL}
                        """
                    )
                } catch (Exception e) {
                    echo "Could not send Slack notification: ${e.getMessage()}"
                }
            }
        }
        
        failure {
            echo "‚ùå Deployment failed!"
            
            script {
                // Send failure notification
                try {
                    slackSend(
                        channel: "${SLACK_CHANNEL}",
                        color: 'danger',
                        message: """
                            ‚ùå *Deployment Failed*
                            
                            *Application:* ${APP_NAME}
                            *Environment:* ${K8S_NAMESPACE}
                            *Build:* ${BUILD_NUMBER}
                            *Commit:* ${env.GIT_COMMIT_HASH}
                            *Time:* ${env.BUILD_TIMESTAMP}
                            
                            View build: ${BUILD_URL}
                            
                            Please check the logs and fix the issues.
                        """
                    )
                } catch (Exception e) {
                    echo "Could not send Slack notification: ${e.getMessage()}"
                }
                
                // Get logs from failed pods for debugging
                withKubeConfig([credentialsId: 'kubernetes-config']) {
                    sh """
                        echo "üîç Getting logs from failed pods:"
                        kubectl logs -l app=${APP_NAME} -n ${K8S_NAMESPACE} --tail=100 || true
                        kubectl describe deployment ${APP_NAME} -n ${K8S_NAMESPACE} || true
                    """
                }
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è  Build completed with warnings"
            
            script {
                try {
                    slackSend(
                        channel: "${SLACK_CHANNEL}",
                        color: 'warning',
                        message: """
                            ‚ö†Ô∏è  *Deployment Completed with Warnings*
                            
                            *Application:* ${APP_NAME}
                            *Environment:* ${K8S_NAMESPACE}
                            *Build:* ${BUILD_NUMBER}
                            *Commit:* ${env.GIT_COMMIT_HASH}
                            
                            Please review the build logs: ${BUILD_URL}
                        """
                    )
                } catch (Exception e) {
                    echo "Could not send Slack notification: ${e.getMessage()}"
                }
            }
        }
    }
}

